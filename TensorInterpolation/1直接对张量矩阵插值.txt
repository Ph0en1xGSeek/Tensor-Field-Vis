// TensorInterpolation.cpp : 定义控制台应用程序的入口点。
// 直接对张量插值

#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <string.h>
#include <stdio.h>
#include "f2c.h"
#include <cmath>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <conio.h>
#include <vector>
#include <iomanip>

#define X 32
#define Y 32
#define N 3
#define NUM_OF_LINE 1000

const double eps = 1e-4;
int Density = 9;
double interval = 0.04;

extern"C"
{
#include <clapack.h>
}

using namespace std;



doublereal* wr[X][Y];
doublereal* vl[X][Y];
doublereal A[X][Y][9];
double tensor[2][2][9];

double cl[X][Y];
double cp[X][Y];
double cs[X][Y];

float mtrl_ambient[4];
float mtrl_diffuse[4];
float mtrl_specular[4];
float one_mat[] = { 1.0,1.0,1.0,1 };
float zero_mat[] = { 0,0,0,1.0 };
float light0_position[] = { 15, 15,  50,  -1 };
float light0_ambient[] = { 0.7, 0.7, 0.7, 1.0 };
float light0_diffuse[] = { 0.7, 0.7, 0.7, 1.0 };
float light0_specular[] = { 0.7, 0.7, 0.7, 1.0 };

float light1_position[] = { 30, 10,  20,  1 };
float light1_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
float light1_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
float light1_specular[] = { 0.5, 0.5, 0.5, 1.0 };

int up_ang = 0;
int left_ang = 0;
int print_mode = 1;

integer info;
char jobvl = 'V';
char jobvr = 'V';
integer n = N;
integer lda = N;

doublereal wi[3];

integer ldvr = N;
doublereal* vr = new doublereal[n * ldvr];

integer ldvl = N;

integer lwork = n * 4;
doublereal *work = new doublereal[lwork];


vector<double> lineX[NUM_OF_LINE];
vector<double> lineY[NUM_OF_LINE];
vector<double> lineCl[NUM_OF_LINE];
vector<double> lineCp[NUM_OF_LINE];
vector<double> lineCs[NUM_OF_LINE];
int numLine = 0;
double winW = 1.0;
double winH = 1.0;

void cal(int i, int j)//每个位置上的glyph
{
	vl[i][j] = new doublereal[N*N];
	wr[i][j] = new doublereal[N];
	dgeev_(&jobvl, &jobvr, &n, A[i][j], &lda, wr[i][j], wi, vl[i][j], &ldvl, vr, &ldvr, work, &lwork, &info);
	double a = wr[i][j][0], b = wr[i][j][1], c = wr[i][j][2];
	if (a < b)
	{
		swap(a, b);
	}
	if (a < c)
	{
		swap(a, c);
	}
	if (b < c)
	{
		swap(b, c);
	}
	cl[i][j] = (a - b) / (a + b + c);
	cp[i][j] = 2.0 * (b - c) / (a + b + c);
	cs[i][j] = 3.0 * c / (a + b + c);
}

void cal2(double curX, double curY, int lineNumber, double* xx, double* xy)//流线主特征向量和颜色
{
	doublereal tmpA[9];
	doublereal tmpvl[N*N];
	doublereal tmpwr[N];
	for (int k = 0; k < N*N; k++)
	{
		tmpA[k] = 0.0;
		tmpA[k] += (X - curX - 1.0) * (Y - curY - 1.0) * tensor[0][0][k] / (X - 1.0) / (Y - 1.0);
		//cout << tmpA[k] << ' ';
		tmpA[k] += (X - curX - 1.0) * (curY)* tensor[0][1][k] / (X - 1.0) / (Y - 1.0);
		//cout << tmpA[k] << ' ';
		tmpA[k] += (curX) * (Y - curY - 1.0) * tensor[1][0][k] / (X - 1.0) / (Y - 1.0);
		//cout << tmpA[k] << ' ';
		tmpA[k] += (curX) * (curY)* tensor[1][1][k] / (X - 1.0) / (Y - 1.0);
		//cout << tmpA[k] << endl;
	}

	dgeev_(&jobvl, &jobvr, &n, tmpA, &lda, tmpwr, wi, tmpvl, &ldvl, vr, &ldvr, work, &lwork, &info);
	double a = tmpwr[0], b = tmpwr[1], c = tmpwr[2];
	double tmp[9];
	for (int ii = 0; ii < 9; ii++)
	{
		tmp[ii] = tmpvl[ii];
		//把每个特征向量模变为1
		if (ii % 3 == 2)
		{
			double tot = sqrt(tmp[ii - 2] * tmp[ii - 2] + tmp[ii - 1] * tmp[ii - 1] + tmp[ii] * tmp[ii]);
			tmp[ii - 2] /= (tot);
			tmp[ii - 1] /= (tot);
			tmp[ii] /= (tot);
		}
	}
	//for (int i = 0; i < N; i++)
	//{
	//	cout << tmpwr[i] << ' ';
	//}
	//printf("\n");

	if (a < b)
	{
		swap(a, b);
		swap(tmp[0], tmp[3]);
		swap(tmp[1], tmp[4]);
		swap(tmp[2], tmp[5]);
	}
	if (a < c)
	{
		swap(a, c);
		swap(tmp[0], tmp[6]);
		swap(tmp[1], tmp[7]);
		swap(tmp[2], tmp[8]);
	}
	if (b < c)
	{
		swap(b, c);
		swap(tmp[3], tmp[6]);
		swap(tmp[4], tmp[7]);
		swap(tmp[5], tmp[8]);
	}
	*xx = tmp[0];
	*xy = tmp[1];
	//cout << tmp[0] << ' ' << tmp[1] << ' ' << tmp[2] << endl;
	lineCl[lineNumber].push_back((a - b) / (a + b + c));
	lineCp[lineNumber].push_back(2.0 * (b - c) / (a + b + c));
	lineCs[lineNumber].push_back(3.0 * c / (a + b + c));
}

void trace()
{
	numLine = 0;
	//for (int i = X / Density; i < X; i += X / Density)
	//{
	//	for (int j = Y / Density; j < Y; j += Y / Density)
	//	{
	//		seedPoint(i, j);
	//	}
	//}
}

void init()
{
	glClearColor(0, 0, 0, 1);

	glShadeModel(GL_SMOOTH);

	float light0_position[] = { 50, 5,  30,  -1 };
	float light0_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
	float light0_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
	float light0_specular[] = { 0.7, 0.7, 0.7, 1.0 };

	glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light0_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light0_specular);

	glLightfv(GL_LIGHT1, GL_POSITION, light1_position);
	glLightfv(GL_LIGHT1, GL_AMBIENT, light1_ambient);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_diffuse);
	glLightfv(GL_LIGHT1, GL_SPECULAR, light1_specular);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	glEnable(GL_LIGHTING);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_NORMALIZE);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0.8, 0.8, 0.8, 1.0);
	glLoadIdentity();

	glRotatef(up_ang, 1, 0, 0);
	glRotatef(left_ang, 0, 1, 0);
	if (print_mode & 1)
	{
		glColor3d(1, 1, 1);
		glLineWidth(1);
		for (int i = 0; i < numLine; i++)
		{
			glBegin(GL_LINE_STRIP);
			{
				int len = lineX[i].size();
				for (int j = 0; j < len; j++)
				{
					mtrl_ambient[0] = lineCl[i][j], mtrl_ambient[1] = lineCp[i][j], mtrl_ambient[2] = lineCs[i][j], mtrl_ambient[3] = 0.0;
					mtrl_diffuse[0] = lineCl[i][j], mtrl_diffuse[1] = lineCp[i][j], mtrl_diffuse[2] = lineCs[i][j], mtrl_diffuse[3] = 0.0;
					mtrl_specular[0] = lineCl[i][j], mtrl_specular[1] = lineCp[i][j], mtrl_specular[2] = lineCs[i][j], mtrl_specular[3] = 0.0;
					glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, mtrl_ambient);
					glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, mtrl_diffuse);
					glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, mtrl_specular);
					glVertex3f(lineX[i][j], lineY[i][j], -1);
				}
			}
			glEnd();
		}
	}
	if (print_mode & 2)
	{
		for (int i = 0; i < X; i += 3)
		{
			for (int j = 0; j < Y; j += 3)
			{
				double a = wr[i][j][0], b = wr[i][j][1], c = wr[i][j][2];
				double frobenius = sqrt(a*a + b*b + c*c);

				a /= frobenius;
				b /= frobenius;
				c /= frobenius;
				double tmp[9];
				double rotate[16];
				for (int ii = 0; ii < 9; ii++)
				{
					tmp[ii] = vl[i][j][ii];
					//把每个特征向量模变为1
					if (ii % 3 == 2)
					{
						double tot = sqrt(tmp[ii - 2] * tmp[ii - 2] + tmp[ii - 1] * tmp[ii - 1] + tmp[ii] * tmp[ii]);
						tmp[ii - 2] /= (tot)*0.4;
						tmp[ii - 1] /= (tot)*0.4;
						tmp[ii] /= (tot)*0.4;
					}
				}
				//========================
				rotate[0] = tmp[0];
				rotate[1] = tmp[1];
				rotate[2] = tmp[2];
				rotate[4] = tmp[3];
				rotate[5] = tmp[4];
				rotate[6] = tmp[5];
				rotate[8] = tmp[6];
				rotate[9] = tmp[7];
				rotate[10] = tmp[8];
				rotate[3] = rotate[7] = rotate[11] = rotate[12] = rotate[13] = rotate[14] = 0.0;
				rotate[15] = 1.0;
				//=======================
				mtrl_ambient[0] = cl[i][j], mtrl_ambient[1] = cp[i][j], mtrl_ambient[2] = cs[i][j], mtrl_ambient[3] = 1.0;
				mtrl_diffuse[0] = cl[i][j], mtrl_diffuse[1] = cp[i][j], mtrl_diffuse[2] = cs[i][j], mtrl_diffuse[3] = 1.0;
				mtrl_specular[0] = cl[i][j], mtrl_specular[1] = cp[i][j], mtrl_specular[2] = cs[i][j], mtrl_specular[3] = 1.0;
				glMaterialfv(GL_FRONT, GL_AMBIENT, mtrl_ambient);
				glMaterialfv(GL_FRONT, GL_DIFFUSE, mtrl_diffuse);
				glMaterialfv(GL_FRONT, GL_SPECULAR, mtrl_specular);
				//glMaterialfv(GL_FRONT, GL_SHININESS, one_mat);
				glPushMatrix();
				glTranslated(i*1.0, j*1.0, 0);
				glMultMatrixd(rotate);
				glScaled(a, b, c);
				glutSolidSphere(0.25, 20, 20);
				glPopMatrix();
			}
		}
	}

	glFlush();
	glutSwapBuffers();
}

void reshape(int w, int h)
{
	winW = w*1.0;
	winH = h*1.0;
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//gluPerspective(90, w / h, 0, 60);
	glOrtho(-1, X, -1, Y, -60, 60);
	glMatrixMode(GL_MODELVIEW);
	//glLoadIdentity();
	glutPostRedisplay();
}

void myIdle(void)
{
	glutPostRedisplay();
}

bool isBiggerThan90(double x1, double y1, double x2, double y2)
{
	double a = (x2 - x1)*(x2 - x1) + (y2 - y1) * (y2 - y1);
	double b = x1*x1 + y1*y1;
	double c = x2*x2 + y2*y2;
	double cos = (b + c - a) / (2 * sqrt(b)*sqrt(c));
	if (cos < -eps) return true;
	else return false;
}

bool dist(int numLine, double x, double y)//是否有距离比较接近的线(曼哈顿距离)
{
	for (int i = 0; i < numLine; i++)
	{
		int len = lineX[i].size();
		for (int j = 0; j < len; j++)
		{
			double xx = lineX[i][j];
			double yy = lineY[i][j];
			if ((x - xx)*(x - xx) + (y - yy)*(y - yy) < 0.04) return true;
		}
	}
	return false;
}

void seedPoint(double i, double j)
{
	int cnt = 0;
	double curX = 1.0*i;
	double curY = 1.0*j;
	double preX = 0.0;//之前的方向
	double preY = 0.0;
	lineX[numLine].clear();
	lineY[numLine].clear();
	while (cnt < 500 && curX < X - 1 && (curX > 0.1 && (curY < Y - 1 && curY > 0.1)))
	{
		cnt++;
		lineX[numLine].push_back(curX);
		lineY[numLine].push_back(curY);
		double xx;
		double xy;
		cal2(curX, curY, numLine, &xx, &xy);
		double norm = sqrt(xx*xx + xy*xy) * 5;
		xx /= norm;
		xy /= norm;
		if ((preX > eps) && isBiggerThan90(preX, preY, xx, xy)) break;
		preX = xx;
		preY = xy;
		curX += xx;
		curY += xy;
		if (dist(numLine, curX, curY)) break;
	}
	curX = 1.0*i;
	curY = 1.0*j;
	preX = 0.0;
	preY = 0.0;
	cnt = 0;
	numLine++;
	lineX[numLine].clear();
	lineY[numLine].clear();
	while (cnt < 500 && curX < X - 1 && (curX > 0.1 && (curY < Y - 1 && curY > 0.1)))
	{
		cnt++;
		lineX[numLine].push_back(curX);
		lineY[numLine].push_back(curY);
		double xx;
		double xy;
		cal2(curX, curY, numLine, &xx, &xy);
		//cout << xx << ' ' << xy << endl;
		double norm = sqrt(xx*xx + xy*xy) * 5;
		xx /= norm;
		xy /= norm;
		if ((preX > eps) && isBiggerThan90(preX, preY, -xx, -xy)) break;
		preX = -xx;
		preY = -xy;
		curX -= xx;
		curY -= xy;
		if (dist(numLine - 1, curX, curY)) break;
	}
	numLine++;
}

void keyboard(unsigned char key, int x, int y)
{
	if (key == 'w')
	{
		up_ang++;
	}
	else if (key == 's')
	{
		up_ang--;
	}
	else if (key == 'a')
	{
		left_ang++;
	}
	else if (key == 'd')
	{
		left_ang--;
	}
	else if (key == '1')
	{
		print_mode = 1;
	}
	else if (key == '2')
	{
		print_mode = 2;
	}
	else if (key == '3')
	{
		print_mode = 3;
	}
	else if (key == '+')
	{
		Density++;
		printf("Waiting...\n");
		trace();
		printf("Success Density = %d\n\n", Density);
	}
	else if (key == '-')
	{
		Density--;
		printf("Waiting...\n");
		trace();
		printf("Success Density = %d\n\n", Density);
	}
	else if (key == 'i')
	{
		printf("Input the interval, it is %lf now: ", interval);
		cin >> interval;
		printf("Waiting...\n");
		trace();
		printf("Success interval = %lf\n\n", interval);
	}
	glutPostRedisplay();
}

void mouse(int key, int state, int x, int y)
{
	if (key == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		double curX = (x*1.0 - winW / (X + 1.0)) / ((X - 1.0)*winW / (X + 1.0)) * (X - 1.0);
		double curY = (winH - y*1.0 - winH / (Y + 1.0)) / ((Y - 1.0)*winH / (Y + 1.0)) * (Y - 1.0);
		//cout << curX << ' ' << curY << endl;
		if (curX > 0 && curY > 0 && curX < X - 1 && curY < Y - 1)
		{
			printf("tracing %lf %lf...\n", curX, curY);
			seedPoint(curX, curY);
			printf("Success\n");
		}
	}
}

int main(int argc, char** argv)
{

	ifstream fin("tensor.txt", ios::in);
	if (!fin)
	{
		printf("File open fail!");
	}
	else
	{
		//======================================source=============
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[0][0][k];
			tensor[0][0][k] = A[0][0][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[0][Y - 1][k];
			tensor[0][1][k] = A[0][Y-1][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[X - 1][0][k];
			tensor[1][0][k] = A[X-1][0][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[X - 1][Y - 1][k];
			tensor[1][1][k] = A[X-1][Y-1][k];
		}

		//==============================================================

		for (int i = 0; i < X; i++)
		{
			for (int j = 0; j < Y; j++)
			{
				if ((i == 0 && j == 0) || (i == X - 1 && j == Y - 1) || (i == X - 1 && j == 0) || (i == 0 && j == Y - 1)) continue;
				for (int k = 0; k < N*N; k++)
				{
					A[i][j][k] = 0.0;
					A[i][j][k] += (double)(X - i - 1) * (Y - j - 1) * A[0][0][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(X - i - 1) * (j)* A[0][Y - 1][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(i) * (Y - j - 1) * A[X - 1][0][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(i) * (j)* A[X - 1][Y - 1][k] / (X - 1) / (Y - 1);
				}

				//for (int k = 0; k < N*N; k++)
				//{
				//	cout << setw(10) << A[i][j][k] << ' ';
				//	if (k % 3 == 2)
				//		printf("\n");
				//}
				//printf("\n");
			}
		}
		//for (int i = 0; i < N*N; i++)
		//{
		//	cout << setw(10) << A[0][Y - 1][i] << ' ';
		//	if (i % 3 == 2)
		//		printf("\n");
		//}
		printf("\n");
		//=================================================================
		for (int i = 0; i < X; i++)
		{
			for (int j = 0; j < Y; j++)
			{
				cal(i, j);
				//if ((i == 0 && j == 0) || (i == X - 1 && j == Y - 1) || (i == X - 1 && j == 0) || (i == 0 && j == Y - 1)) continue;
			}
		}


		//for (int k = 0; k < N*N; k++)
		//{
		//	cout << setw(10) << A[0][Y-1][k] << ' ';
		//	if (k % 3 == 2)
		//		printf("\n");
		//}
		printf("\n");
		trace();
		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_MULTISAMPLE);
		glutInitWindowSize(1000, 1000);
		glutInitWindowPosition(100, 100);
		glutCreateWindow("Interpolation");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutKeyboardFunc(keyboard);
		glutMouseFunc(mouse);
		glutIdleFunc(myIdle);
		glutMainLoop();
	}
	return 0;
}

