// TensorInterpolation.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <string.h>
#include <stdio.h>
#include "f2c.h"
#include <cmath>
#include <gl\glew.h>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <conio.h>

#define X 6
#define Y 6
#define N 3

const double eps = 0.001;

extern"C"
{
	#include <clapack.h>
}

using namespace std;

doublereal* wr[X][Y];
doublereal* vl[X][Y];
doublereal A[X][Y][9];

double cl[X][Y];
double cp[X][Y];
double cs[X][Y];

float mtrl_ambient[4];  
float mtrl_diffuse[4];
float mtrl_specular[4];
float one_mat[] = { 1.0,1.0,1.0,1 };

integer info;
char jobvl = 'V';
char jobvr = 'V';
integer n = N;
integer lda = N;

doublereal wi[3];

integer ldvr = N;
doublereal* vr = new doublereal[n * ldvr];

integer ldvl = N;

integer lwork = n * 4;
doublereal *work = new doublereal[lwork];


void cal(int i, int j)
{
	vl[i][j] = new doublereal[N*N];
	wr[i][j] = new doublereal[N];
	dgeev_(&jobvl, &jobvr, &n, A[i][j], &lda, wr[i][j], wi, vl[i][j], &ldvl, vr, &ldvr, work, &lwork, &info);

	double a = wr[i][j][0], b = wr[i][j][1], c = wr[i][j][2];
	if (a < b)
	{
		swap(a, b);
	}
	if (a < c)
	{
		swap(a, c);
	}
	if (b < c)
	{
		swap(b, c);
	}
	cl[i][j] = (a - b) / (a + b + c);
	cp[i][j] = 2.0 * (b - c) / (a + b + c);
	cs[i][j] = 3.0 * c / (a + b + c);
}

void init()
{
	glClearColor(0, 0, 0, 1);

	glShadeModel(GL_SMOOTH);

	float light0_position[] = { 50, 5,  30,  1 };
	float light0_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
	float light0_diffuse[] = { 0.5, 0.5, 0.5, 1.0 };
	float light0_specular[] = { 0.7, 0.7, 0.7, 1.0 };

	glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light0_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light0_specular);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_NORMALIZE);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glLoadIdentity();
	glColor3f(1, 1, 1);
	for (int i = 0; i < X; i++)
	{
		for (int j = 0; j < Y; j++)
		{
			double a = wr[i][j][0], b = wr[i][j][1], c = wr[i][j][2];
			double frobenius = sqrt(a*a + b*b + c*c);

			a /= frobenius;
			b /= frobenius;
			c /= frobenius;
			double tmp[9];
			double rotate[16];
			for (int ii = 0; ii < 9; ii++)
			{
				tmp[ii] = vl[i][j][ii];
				//把每个特征向量模变为1
				if (ii % 3 == 2)
				{
					double tot = sqrt(tmp[ii - 2] * tmp[ii - 2] + tmp[ii - 1] * tmp[ii - 1] + tmp[ii] * tmp[ii]);
					tmp[ii - 2] /= (tot);
					tmp[ii - 1] /= (tot);
					tmp[ii] /= (tot);
				}
			}
			//========================
			rotate[0] = tmp[0];
			rotate[1] = tmp[1];
			rotate[2] = tmp[2];
			rotate[4] = tmp[3];
			rotate[5] = tmp[4];
			rotate[6] = tmp[5];
			rotate[8] = tmp[6];
			rotate[9] = tmp[7];
			rotate[10] = tmp[8];
			rotate[3] = rotate[7] = rotate[11] = rotate[12] = rotate[13] = rotate[14] = 0.0;
			rotate[15] = 1.0;
			//=======================
			mtrl_ambient[0] = cl[i][j], mtrl_ambient[1] = cp[i][j], mtrl_ambient[2] = cs[i][j], mtrl_ambient[3] = 1.0;
			mtrl_diffuse[0] = cl[i][j], mtrl_diffuse[1] = cp[i][j], mtrl_diffuse[2] = cs[i][j], mtrl_diffuse[3] = 1.0;
			mtrl_specular[0] = cl[i][j], mtrl_specular[1] = cp[i][j], mtrl_specular[2] = cs[i][j], mtrl_specular[3] = 1.0;
			glMaterialfv(GL_FRONT, GL_AMBIENT, mtrl_ambient);
			glMaterialfv(GL_FRONT, GL_DIFFUSE, mtrl_diffuse);
			glMaterialfv(GL_FRONT, GL_SPECULAR, one_mat);
			glMaterialfv(GL_FRONT, GL_SHININESS, one_mat);
			glPushMatrix();
			glTranslated(i*1.0, j*1.0, 0);
			glMultMatrixd(rotate);
			glScaled(a, b, c);
			glutSolidSphere(0.25, 20, 20);
			glPopMatrix();
		}
	}
	glFlush();
	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//gluPerspective(90, w / h, 0, 60);
	glOrtho(-1, 6, -1, 6, -10, 10);
	glMatrixMode(GL_MODELVIEW);
	//glLoadIdentity();
}

void myIdle(void)
{
	glutPostRedisplay();
}

int main(int argc, char** argv)
{
	
	ifstream fin("data.txt", ios::in);
	if (!fin)
	{
		printf("File open fail!");
	}
	else
	{
//======================================source=============
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[0][0][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[0][Y-1][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[X-1][Y-1][k];
		}
		for (int k = 0; k < N*N; k++)
		{
			fin >> A[X-1][0][k];
		}
//==============================================================

		for (int i = 0; i < X; i++)
		{
			for (int j = 0; j < Y; j++)
			{
				if ((i == 0 && j == 0) || (i == X - 1 && j == Y - 1) || (i == X - 1 && j == 0) || (i == 0 && j == Y - 1)) continue;
				for (int k = 0; k < N*N; k++)
				{
					A[i][j][k] = 0.0;
					A[i][j][k] += (double)(X - i - 1) * (Y - j - 1) * A[0][0][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(X - i - 1) * (j) * A[0][Y-1][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(i) * (Y - j - 1) * A[X-1][0][k] / (X - 1) / (Y - 1);
					A[i][j][k] += (double)(i) * (j) * A[X-1][Y-1][k] / (X - 1) / (Y - 1);
				}
			}
		}

//=================================================================
		cal(0, 0);
		cal(0, Y - 1);
		cal(X - 1, 0);
		cal(X - 1, Y - 1);
		for (int i = 0; i < X; i++)
		{
			for (int j = 0; j < Y; j++)
			{
				if ((i == 0 && j == 0) || (i == X - 1 && j == Y - 1) || (i == X - 1 && j == 0) || (i == 0 && j == Y - 1)) continue;
				vl[i][j] = new doublereal[N*N];
				wr[i][j] = new doublereal[N];
				for (int k = 0; k < N*N; k++)
				{
					vl[i][j][k] = 0.0;
					vl[i][j][k] += (double)(X - i - 1) * (Y - j - 1) * vl[0][0][k] / (X - 1) / (Y - 1);
					vl[i][j][k] += (double)(X - i - 1) * (j)* vl[0][Y - 1][k] / (X - 1) / (Y - 1);
					vl[i][j][k] += (double)(i) * (Y - j - 1) * vl[X - 1][0][k] / (X - 1) / (Y - 1);
					vl[i][j][k] += (double)(i) * (j)* vl[X - 1][Y - 1][k] / (X - 1) / (Y - 1);
				}
				for (int k = 0; k < N; k++)
				{
					wr[i][j][k] = 0.0;
					wr[i][j][k] += (double)(X - i - 1) * (Y - j - 1) * wr[0][0][k] / (X - 1) / (Y - 1);
					wr[i][j][k] += (double)(X - i - 1) * (j)* wr[0][Y - 1][k] / (X - 1) / (Y - 1);
					wr[i][j][k] += (double)(i) * (Y - j - 1) * wr[X - 1][0][k] / (X - 1) / (Y - 1);
					wr[i][j][k] += (double)(i) * (j)* wr[X - 1][Y - 1][k] / (X - 1) / (Y - 1);
				}
				double a = wr[i][j][0], b = wr[i][j][1], c = wr[i][j][2];
				if (a < b)
				{
					swap(a, b);
				}
				if (a < c)
				{
					swap(a, c);
				}
				if (b < c)
				{
					swap(b, c);
				}
				cl[i][j] = (a - b) / (a + b + c);
				cp[i][j] = 2.0 * (b - c) / (a + b + c);
				cs[i][j] = 3.0 * c / (a + b + c);
				//cal(i, j);
				//if ((i == 0 && j == 0) || (i == X - 1 && j == Y - 1) || (i == X - 1 && j == 0) || (i == 0 && j == Y - 1)) continue;
			}
		}


		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_MULTISAMPLE);
		glutInitWindowSize(500, 500);
		glutInitWindowPosition(100, 100);
		glutCreateWindow("Interpolation");
		init();
		glutDisplayFunc(display);
		glutReshapeFunc(reshape);
		glutIdleFunc(myIdle);
		glutMainLoop();
	}
    return 0;
}

